<!DOCTYPE html>
<!-- saved from url=(0043)https://fettblog.eu/typescript-react/hooks/ -->
<html lang="en" class="gr__fettblog_eu"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>TypeScript and React: Hooks</title>
<meta name="viewport" content="width=device-width,initial-scale=1">
<link rel="manifest" href="https://fettblog.eu/manifest.json">
<meta name="theme-color" content="transparent">
<meta name="description" content="Blog with articles on all things web development: CSS, JS, Node, HTML, A11Y">
<meta name="keywords" content="Web, Web Ops, DevOps, Performance, Front-End, JavaScript, CSS">


<style>
*{box-sizing:border-box}*:after,*:before{box-sizing:inherit}html{font-size:16px}body{font-weight:300;font-size:1rem;line-height:1.5em;font-family:"Fira Sans",-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";color:#454545;margin:0}@media (min-width: 40em){html{font-size:18px}}a,a:visited{color:#26a95d;color:var(--main-color, #26a95d);text-decoration:none}a:focus,a:hover{color:#31d174;color:var(--highlight-color, #31d174)}h1{font-size:1.7rem}h1,h2,h3,b,strong{font-weight:500}.wrapper h1{line-height:1.2em}h1,h2,h3,h4,h5{margin-top:1.75em}img{max-width:100%}code{font-family:'Monaco', monospace;font-size:0.8rem}ol{padding-left:1.4rem}ol li{padding-left:0.5rem}ul{padding-left:1.1rem}figure{margin:1rem 0 1rem -1rem;width:calc(100% + 2rem)}figcaption{margin-left:1rem;margin-right:1rem;font-style:italic}@media (min-width: 800px){figure{margin:2rem 0 2rem -2rem;width:calc(100% + 4rem)}figcaption{margin-left:2rem;margin-right:2rem}}.categories{font-size:0.8em;color:#666}.wrapper{position:relative;margin-left:auto;margin-right:auto;background-color:white;color:#454545;padding:1rem;max-width:53em;padding-bottom:2rem;min-height:calc(100vh - 47px)}@media (min-width: 50em){.wrapper{padding:1rem 5rem 1rem}}@media (min-width: 85em){.wrapper{margin-left:0;margin-top:-1rem}}.aspect{position:relative;width:100%;height:0;margin:1em 0;overflow:hidden}.aspect.ratio-16-to-9{padding-bottom:56.25%}.aspect.ratio-4-to-3{padding-bottom:75%}.aspect>*{position:absolute;top:0;left:0;width:100%;height:100%}.highlight{margin:1rem -1rem;padding:0 1rem;overflow:auto;color:#fafafa;background-color:#454545}@media (min-width: 50em){.highlight{width:calc(100% + 10rem);margin:1rem -5rem;padding:0 5rem}}.note{background-color:#f7dc6f;padding:1rem;margin:1rem -1rem 0}@media (min-width: 50em){.note{width:calc(100% + 10rem);margin:1rem -5rem 0;padding:1rem 5rem}}@media (min-width: 85em){.note{margin-top:0}}.main-header{position:relative;margin-left:auto;margin-right:auto;max-width:53em;text-align:center;text-transform:lowercase}@media (min-width: 85em){.main-header{position:fixed;left:53rem;height:100vh;padding:4rem;font-weight:300;width:100%;text-align:left;margin-left:0;border-left:1px solid rgba(0,0,0,0.1);top:0;z-index:2;background-color:white}}.main-nav{list-style-type:none;margin:0;padding:0}.nav-item{line-height:2em;display:block;transition:all 0.3s ease;padding:0 1rem;margin:0 -1rem}.nav-item:hover,.nav-item:focus{background-color:#26a95d;background-color:var(--main-color, #26a95d);color:white}.main-title{font-weight:300;color:#26a95d;color:var(--main-color, #26a95d)}@media (max-width: 85em){.main-nav{display:flex;justify-content:center;width:100%;flex-wrap:wrap}.nav-item{padding:0 0.5rem;margin:0}}.paging{position:relative;list-style-type:none;margin:1rem 0 0;padding:0;max-width:53em;display:flex;background-color:#26a95d;background-color:var(--main-color, #26a95d);color:white;margin-left:auto;margin-right:auto}.paging-item{flex:1 0 50%;padding:0}.paging-link,.paging-link:visited{padding:1rem;display:block;color:white;transition:all 0.3s ease;height:100%}.paging-link:hover,.paging-link:focus{background-color:white;color:#26a95d;color:var(--main-color, #26a95d)}.link-prev:before{content:'Previous: '}.link-next:before{content:'Next: '}@media (min-width: 85em){.paging{margin-left:0;padding-left:4rem}}.post-title a[href^=http]:before{content:'\279e  '}.post-date{font-size:0.8rem;color:#666;margin-top:-0.7em}.read-more:before{content:'\279e  '}.highlight .c{color:#998;font-style:italic}.highlight .cm{color:#998;font-style:italic}.highlight .cp{color:#998}.highlight .c1{color:#998;font-style:italic}.highlight .cs{color:#998;font-weight:bold;font-style:italic}.highlight .gd{color:red}.highlight .gd .x{color:#000;background-color:#faa}.highlight .ge{font-style:italic}.highlight .gr{color:#a00}.highlight .gh{color:#998}.highlight .gi{color:limegreen}.highlight .gi .x{color:#000;background-color:#afa}.highlight .go{color:#888}.highlight .gp{color:#998}.highlight .gu{color:#aaa}.highlight .gt{color:#a00}.highlight .k,.highlight .kd,.highlight .kr,.highlight .kt{color:#25AFD1}.highlight .m{color:#FF4A58}.highlight .s{color:#FF4A58}.highlight .na{color:#25AFD1}.highlight .nb{color:#0086B3}.highlight .nc{color:#fe0000}.highlight .no{color:#25AFD1}.highlight .ni{color:purple}.highlight .ne{color:#fe0000}.highlight .nf{color:#fe0000}.highlight .nn{color:#998}.highlight .nt{color:#fff}.highlight .nv{color:#25AFD1}.highlight .w{color:#bbb}.highlight .mf{color:#FF4A58}.highlight .mh{color:#FF4A58}.highlight .mi{color:#FF4A58}.highlight .mo{color:#FF4A58}.highlight .sb{color:#FF4A58}.highlight .sc{color:#FF4A58}.highlight .sd{color:#FF4A58}.highlight .s2{color:#FF4A58}.highlight .se{color:#FF4A58}.highlight .sh{color:#FF4A58}.highlight .si{color:#FF4A58}.highlight .sx{color:#FF4A58}.highlight .s1{color:#FF4A58}.highlight .ss{color:#990073}.highlight .bp{color:#998}.highlight .vc{color:#25AFD1}.highlight .vg{color:#25AFD1}.highlight .vi{color:#25AFD1}.highlight .il{color:#FF4A58}.appearances{list-style-type:none;margin:0;padding:0}.appearance__date{font-size:0.8rem;color:grey;display:block}.appearance__detail{padding:1rem 0}.appearance__detail+.appearance__detail{border-top:1px solid lightgray}.talks{list-style-type:none;padding:0}.talk__entry:before{content:'Talk: ';color:grey}.talk--workshop:before{content:'Workshop: '}.talk__coverage+.talk__coverage:before{content:'| ';color:#454545}.talk__coverage+.talk__coverage:before:hover,.talk__coverage+.talk__coverage:before:active,.talk__coverage+.talk__coverage:before:visited{color:#454545}.talk__entry{padding-left:0}.foot{font-size:0.7rem;color:white;background-color:#454546;padding:0.1rem 1rem}@media (min-width: 50em){.foot{padding:0.1rem 3rem}}@media (min-width: 85em){.foot{margin-right:3rem}}.visually-hidden{visibility:hidden;position:absolute}.theme-blue{--main-color: #007ACC;--highlight-color: #0099ff}#carbonads{font-family:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", Helvetica, Arial, sans-serif}#carbonads{display:flex;max-width:330px;background-color:#fafafa;box-shadow:0 1px 4px 1px rgba(0,0,0,0.1)}#carbonads a{color:inherit;text-decoration:none}#carbonads a:hover{color:inherit}#carbonads span{position:relative;display:block;overflow:hidden}#carbonads .carbon-wrap{display:flex}.carbon-img{display:block;margin:0;line-height:1}.carbon-img img{display:block}.carbon-text{font-size:13px;padding:10px;line-height:1.5;text-align:left}.carbon-poweredby{display:block;padding:8px 10px;background:repeating-linear-gradient(-45deg, transparent, transparent 5px, rgba(0,0,0,0.025) 5px, rgba(0,0,0,0.025) 10px) rgba(241,243,244,0.4);text-align:center;text-transform:uppercase;letter-spacing:.5px;font-weight:600;font-size:9px;line-height:1}@media (min-width: 50em){#carbonads{float:right;margin-left:1rem;margin-bottom:1rem}}@media (min-width: 85em){#carbonads{position:fixed;left:57rem;float:none;top:550px;z-index:1000;margin-left:0;margin-bottom:0}}

</style>

<link rel="alternate" type="application/rss+xml" title="front-end technology talk Â» Updates" href="https://fettblog.eu/atom.xml">

<link rel="pingback" href="https://webmention.io/fettblog.eu/xmlrpc">
<link rel="webmention" href="https://webmention.io/fettblog.eu/webmention">
<link rel="apple-touch-icon" sizes="180x180" href="https://fettblog.eu/icon/apple-touch-icon.png">
<link rel="icon" type="image/png" href="https://fettblog.eu/icon/favicon-32x32.png" sizes="32x32">
<link rel="icon" type="image/png" href="https://fettblog.eu/icon/favicon-16x16.png" sizes="16x16">
<script id="_carbonads_projs" type="text/javascript" src="./TypeScript and React_ Hooks_files/CE7DT2JM.json"></script></head>
<body class="theme-blue" data-gr-c-s-loaded="true">
<header class="main-header">
<h1 class="main-title">Stefan Baumgartner</h1>
<p>Web ops, performance and front-end</p>
<nav>
<ul class="main-nav">
<li><a href="https://fettblog.eu/" class="nav-item">Home</a></li>
<li><a href="https://fettblog.eu/contact/" class="nav-item">About</a></li>
<li><a href="https://fettblog.eu/speaking/" class="nav-item">Speaking</a></li>
<li><a href="https://fettblog.eu/typescript-react/" class="nav-item">Typescript + React</a></li>
<li><a href="https://scriptconf.org/" class="nav-item">ScriptConf</a></li>
<li><a href="https://www.manning.com/books/front-end-tooling-with-gulp-bower-and-yeoman/?a_aid=fettblog&amp;a_bid=238ac06a" class="nav-item">My Gulp book</a></li>

<li><a href="https://twitter.com/ddprrt" class="nav-item">Twitter</a></li>
</ul>
</nav>
</header>
<article class="wrapper h-entry">
<h1>TypeScript and React: Hooks</h1>
<script async="" type="text/javascript" src="./TypeScript and React_ Hooks_files/carbon.js" id="_carbonads_js"></script><div id="carbonads"><span><span class="carbon-wrap"><a href="https://srv.carbonads.net/ads/click/x/GTND42QNCYSDPKQJCW7LYKQMCYSIT27YCYYDTZ3JCWSD5K3YCKADK2JKC6BIK2JNCASDEK3EHJNCLSIZ?segment=placement:fettblogeu;" class="carbon-img" target="_blank" rel="noopener"><img src="./TypeScript and React_ Hooks_files/1566564337-Waves-260x200.jpg" alt="ads via Carbon" border="0" height="100" width="130" style="max-width: 130px;"></a><a href="https://srv.carbonads.net/ads/click/x/GTND42QNCYSDPKQJCW7LYKQMCYSIT27YCYYDTZ3JCWSD5K3YCKADK2JKC6BIK2JNCASDEK3EHJNCLSIZ?segment=placement:fettblogeu;" class="carbon-text" target="_blank" rel="noopener">How to Build a Decentralized Application (DApps). Free course. Join now!</a></span><a href="http://carbonads.net/?utm_source=fettblogeu&amp;utm_medium=ad_via_link&amp;utm_campaign=in_unit&amp;utm_term=carbon" class="carbon-poweredby" target="_blank" rel="noopener">ads via Carbon</a></span></div>
<div class="e-content">
<p>Hooks have been announced at React Conf 2018. Check out <a href="https://reactjs.org/docs/hooks-intro.html">this page</a> for more
details. I think theyâre pretty awesome. Probably game-changing! Hooks heave formerly âstatelessâ functional components to
â¦ basically everything traditional class components can be. With a much cleaner API!</p>
<p>Just quickly after their release in React 16.7., React typings in DefinitelyTyped got an update as well. Check out how you
can use hooks with TypeScript!</p>
<p><strong>Disclaimer</strong>: This is all very experimental. Sweet nonetheless.</p>
<p>In this section:</p>
<ol>
<li><a href="https://fettblog.eu/typescript-react/hooks/#usestate">useState</a></li>
<li><a href="https://fettblog.eu/typescript-react/hooks/#useeffect">useEffect</a></li>
<li><a href="https://fettblog.eu/typescript-react/hooks/#usecontext">useContext</a></li>
<li><a href="https://fettblog.eu/typescript-react/hooks/#useref">useRef</a></li>
<li><a href="https://fettblog.eu/typescript-react/hooks/#usememo---usecallback">useMemo and useCallback</a></li>
<li><a href="https://fettblog.eu/typescript-react/hooks/#usereducer">useReducer</a></li>
</ol>
<h2 id="usestate">useState</h2>
<p><code class="highlighter-rouge">useState</code> is probably one you are going to use a lot. Instead of using <code class="highlighter-rouge">this.state</code> from class components, you can access the
current state of a component instance, and initialise it, with one single function call. Our desire for strong typing is that
values we initially set, get per component update, and set through events, always have the same type. With the provided
typings, this works without any additional TypeScript:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// import useState next to FunctionComponent</span>
<span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">FunctionComponent</span><span class="p">,</span> <span class="nx">useState</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>

<span class="c1">// our components props accept a number for the initial value</span>
<span class="kd">const</span> <span class="nx">Counter</span><span class="p">:</span><span class="nx">FunctionComponent</span><span class="o">&lt;</span><span class="p">{</span> <span class="nx">initial</span><span class="p">?:</span> <span class="nx">number</span> <span class="p">}</span><span class="o">&gt;</span> <span class="o">=</span> <span class="p">({</span> <span class="nx">initial</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// since we pass a number here, clicks is going to be a number.</span>
  <span class="c1">// setClicks is a function that accepts either a number or a function returning</span>
  <span class="c1">// a number</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">clicks</span><span class="p">,</span> <span class="nx">setClicks</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="nx">initial</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;&gt;</span>
    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="na">Clicks</span><span class="p">:</span> <span class="p">{</span><span class="nx">clicks</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setClicks</span><span class="p">(</span><span class="nx">clicks</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span><span class="o">&gt;+&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">setClicks</span><span class="p">(</span><span class="nx">clicks</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="o">&gt;-&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div>
<p>And thatâs it. Your code works with out any extra type annotations, but still typechecks.</p>
<h2 id="useeffect">useEffect</h2>
<p><code class="highlighter-rouge">useEffect</code> is here for all side effects. Adding event listeners, changing things in the document, fetching data.
Everything you would use component lifecycle methods for (<code class="highlighter-rouge">componentDidUpdate</code>, <code class="highlighter-rouge">componentDidMount</code>, <code class="highlighter-rouge">componentWillUnmount</code>)
The method signature is pretty straightforward. It accepts two parameters:</p>
<ul>
<li>A function that is called without any parameters. This is the side-effect you want to call.</li>
<li>An array of values of type <code class="highlighter-rouge">any</code>. This parameter is optional. If you donât provide it, the function provided is called
every time the component update. If you do, React will check if those values did change, and triggers the function only
if thereâs a difference.</li>
</ul>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Standard use case.</span>
<span class="kd">const</span> <span class="p">[</span><span class="nx">name</span><span class="p">,</span> <span class="nx">setName</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="s1">'Stefan'</span><span class="p">);</span>
<span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="s2">`Hello </span><span class="p">${</span><span class="nx">name</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">name</span><span class="p">])</span>
</code></pre></div></div>
<p>You donât need to provide any extra typings. TypeScript will check that the method signature of the function
you provide is correct. This function also has a return value (for cleanups). And TypeScript will check that you provide
a correct function as well:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">handler</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">title</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="nb">window</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">'resize'</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>

  <span class="c1">// â¡ï¸ won't compile</span>
  <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>

  <span class="c1">// â  compiles</span>
  <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s1">'resize'</span><span class="p">,</span> <span class="nx">handler</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div></div>
<p>This also goes for <code class="highlighter-rouge">useLayoutEffect</code> and <code class="highlighter-rouge">useMutationEffect</code>.</p>
<h2 id="usecontext">useContext</h2>
<p><code class="highlighter-rouge">useContext</code> allows you to access context properties from anywhere in your components. Much like the <code class="highlighter-rouge">Context.Consumer</code>
does in class components. Type inference works brilliantly here, you donât need to use any TypeScript specific language
features to get everything done:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useContext</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>

<span class="c1">// our context sets a property of type string</span>
<span class="k">export</span> <span class="kd">const</span> <span class="nx">LanguageContext</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createContext</span><span class="p">({</span> <span class="na">lang</span><span class="p">:</span> <span class="s1">'en'</span> <span class="p">});</span>

<span class="kd">const</span> <span class="nx">Display</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// lang will be of type string</span>
  <span class="kd">const</span> <span class="p">{</span> <span class="nx">lang</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">useContext</span><span class="p">(</span><span class="nx">LanguageContext</span><span class="p">);</span>
  <span class="k">return</span> <span class="o">&lt;&gt;</span>
    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Your</span> <span class="nx">selected</span> <span class="na">language</span><span class="p">:</span> <span class="p">{</span><span class="nx">lang</span><span class="p">}</span><span class="o">&lt;</span><span class="sr">/p</span><span class="err">&gt;
</span>  <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span><span class="p">}</span>
</code></pre></div></div>
<p>Again, as it should be!</p>
<h2 id="useref">useRef</h2>
<p><code class="highlighter-rouge">useRef</code> is nice as you can set references directly in your function components. However, this was the first time I found
hooks together with TypeScript a bit tricky! When you are in strict mode, TypeScript might complain:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span> <span class="nx">useRef</span> <span class="p">}</span> <span class="k">from</span> <span class="s1">'react'</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">TextInputWithFocusButton</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// it's common to initialise refs with null</span>
  <span class="kd">const</span> <span class="nx">inputEl</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">onButtonClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// â¡ï¸ TypeScript in strict mode will complain here, </span>
    <span class="c1">// because inputEl can be null!</span>
    <span class="nx">inputEl</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputEl</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"text"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onButtonClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Focus</span> <span class="nx">the</span> <span class="nx">input</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Hereâs what bugs us:</p>
<ul>
<li>usually we initialise refs with null. This is because we set it later in our JSX calls</li>
<li>with the initial value of a ref being null, inputEl might be null. TypeScript complains that you should do a strict
null check.</li>
</ul>
<p>Thatâs not the only thing. Since TypeScript doesnât know which element we want to refer to, things like <code class="highlighter-rouge">current</code> and
<code class="highlighter-rouge">focus()</code> will also probably be null. So our strict null checks are pretty elaborate. We can make this a ton easier
for us and for TypeScript, when we know which type of element we want to ref. This also helps us to not mix up element types
in the end:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">TextInputWithFocusButton</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// initialise with null, but tell TypeScript we are looking for an HTMLInputElement</span>
  <span class="kd">const</span> <span class="nx">inputEl</span> <span class="o">=</span> <span class="nx">useRef</span><span class="o">&lt;</span><span class="nx">HTMLInputElement</span><span class="o">&gt;</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">onButtonClick</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="c1">// strict null checks need us to check if inputEl and current exist.</span>
    <span class="c1">// but once current exists, it is of type HTMLInputElement, thus it</span>
    <span class="c1">// has the method focus! â</span>
    <span class="k">if</span><span class="p">(</span><span class="nx">inputEl</span> <span class="o">&amp;&amp;</span> <span class="nx">inputEl</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">inputEl</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">focus</span><span class="p">();</span>
    <span class="p">}</span> 
  <span class="p">};</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="p">{</span> <span class="cm">/* in addition, inputEl only can be used with input elements. Yay! */</span> <span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">inputEl</span><span class="p">}</span> <span class="nx">type</span><span class="o">=</span><span class="s2">"text"</span> <span class="o">/&gt;</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="nx">onButtonClick</span><span class="p">}</span><span class="o">&gt;</span><span class="nx">Focus</span> <span class="nx">the</span> <span class="nx">input</span><span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>A bit more type safety for all of us â¤ï¸</p>
<h2 id="usememo---usecallback">useMemo - useCallback</h2>
<p>You know from <code class="highlighter-rouge">useEffect</code> that you can influence the execution of certain functions by passing some parameters to it.
React checks if those parameters have changed, and will execute this function only if thereâs a difference.</p>
<p><code class="highlighter-rouge">useMemo</code> does something similar. Letâs say you have computation heavy methods, and only want to run them when their parameters
change, not every time the component updates. <code class="highlighter-rouge">useMemo</code> returns a memoized result, and executes the callback function only
when parameters change.</p>
<p>To use that with TypeScript, we want to make sure that the return type from <code class="highlighter-rouge">useMemo</code> is the same as the return type from
the callback:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 *  returns the occurence of if each shade of the 
 *  red color component. Needs to browse through every pixel 
 *  of an image for that.
 */</span>
<span class="kd">function</span> <span class="nx">getHistogram</span><span class="p">(</span><span class="nx">image</span><span class="p">:</span> <span class="nx">ImageData</span><span class="p">):</span> <span class="nx">number</span><span class="p">[]</span> <span class="p">{</span>
  <span class="c1">// details not really necessary for us right now ð</span>
  <span class="p">...</span>
  <span class="k">return</span> <span class="nx">histogram</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Histogram</span><span class="p">()</span> <span class="p">{</span>
  <span class="p">...</span>
  <span class="cm">/*
   * We don't want to run this method all the time, that's why we save
   * the histogram and only update it if imageData (from a state or somewhere)
   * changes.
   *
   * If you provide correct return types for your function or type inference is
   * strong enough, your memoized value has the same type.
   * In that case, our histogram is an array of numbers
   */</span>
  <span class="kd">const</span> <span class="nx">histogram</span> <span class="o">=</span> <span class="nx">useMemo</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">getHistogram</span><span class="p">(</span><span class="nx">imageData</span><span class="p">),</span> <span class="p">[</span><span class="nx">imageData</span><span class="p">]);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The React typings are pretty good at that, so you donât have to do much else.</p>
<p><code class="highlighter-rouge">useCallback</code> is very similar. In fact, itâs a shortcut that can be expressed with <code class="highlighter-rouge">useMemo</code> as well. But it returns a
callback function, not a value. Typings work similar:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">memoCallback</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">((</span><span class="nx">a</span><span class="p">:</span> <span class="nx">number</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="c1">// doSomething</span>
<span class="p">},</span> <span class="p">[</span><span class="nx">a</span><span class="p">])</span>

<span class="c1">// â¡ï¸ Won't compile, as the callback needs a number</span>
<span class="nx">memoCallback</span><span class="p">();</span>

<span class="c1">// â compiles</span>
<span class="nx">memoCallback</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>
<p>The key here is: Get your typings right. The React typings do the rest.</p>
<h2 id="usereducer">useReducer</h2>
<p>Now this is something, isnât it? The core of Redux and similar state management libraries baked into a hook. Sweet and
easy to use. The typings are also pretty straightforward, but letâs look at everything step by step. We take the example
from the website, and try to make it type safe.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">case</span> <span class="s1">'reset'</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">initialState</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">'increment'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="k">case</span> <span class="s1">'decrement'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Counter</span><span class="p">({</span> <span class="nx">initialCount</span> <span class="o">=</span> <span class="mi">0</span><span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">initialCount</span> <span class="p">});</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="nx">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'reset'</span> <span class="p">})}</span><span class="o">&gt;</span>
        <span class="nx">Reset</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'increment'</span> <span class="p">})}</span><span class="o">&gt;+&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'decrement'</span> <span class="p">})}</span><span class="o">&gt;-&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="highlighter-rouge">useReducer</code> accepts a reducer function and an initial state. The reducer function switches the <code class="highlighter-rouge">action.type</code>
property and selects the respective action. Nothing new. Itâs just that right now, everything is of type <code class="highlighter-rouge">any</code>.
We can change that.</p>
<p>The <code class="highlighter-rouge">useReducer</code> typings are nice as you donât have to change anything in the usage of <code class="highlighter-rouge">useReducer</code>, but can control
everything via type inference from the reducer function. Letâs start by making the actions more type safe. Hereâs what we
want to avoid:</p>
<ul>
<li>listening to actions that are not <code class="highlighter-rouge">reset</code>, <code class="highlighter-rouge">increment</code> or <code class="highlighter-rouge">decrement</code></li>
<li>Making sure that the <code class="highlighter-rouge">type</code> property is set.</li>
</ul>
<p>For that, we create an <code class="highlighter-rouge">ActionType</code> type definition. We use union types to make sure that <code class="highlighter-rouge">type</code> can only be of
<code class="highlighter-rouge">reset</code>, <code class="highlighter-rouge">increment</code> or <code class="highlighter-rouge">decrement</code>.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">ActionType</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">type</span><span class="p">:</span> <span class="s1">'reset'</span> <span class="o">|</span> <span class="s1">'decrement'</span> <span class="o">|</span> <span class="s1">'increment'</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">initialState</span> <span class="o">=</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="mi">0</span> <span class="p">};</span>

<span class="c1">// We only need to set the type here ...</span>
<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">ActionType</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="p">(</span><span class="nx">action</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// ... to make sure that we don't have any other strings here ...</span>
    <span class="k">case</span> <span class="s1">'reset'</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">initialState</span><span class="p">;</span>
    <span class="k">case</span> <span class="s1">'increment'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="k">case</span> <span class="s1">'decrement'</span><span class="p">:</span>
      <span class="k">return</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">state</span><span class="p">.</span><span class="nx">count</span> <span class="o">-</span> <span class="mi">1</span> <span class="p">};</span>
    <span class="nl">default</span><span class="p">:</span>
      <span class="k">return</span> <span class="nx">state</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">Counter</span><span class="p">({</span> <span class="nx">initialCount</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">})</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">initialCount</span> <span class="p">});</span>
  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;&gt;</span>
      <span class="nx">Count</span><span class="p">:</span> <span class="p">{</span><span class="nx">state</span><span class="p">.</span><span class="nx">count</span><span class="p">}</span>
      <span class="p">{</span> <span class="cm">/* and can dispatch certain events here */</span> <span class="p">}</span>
      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'reset'</span> <span class="p">})}</span><span class="o">&gt;</span>
        <span class="nx">Reset</span>
      <span class="o">&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'increment'</span> <span class="p">})}</span><span class="o">&gt;+&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>      <span class="o">&lt;</span><span class="nx">button</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span> <span class="nx">dispatch</span><span class="p">({</span> <span class="na">type</span><span class="p">:</span> <span class="s1">'decrement'</span> <span class="p">})}</span><span class="o">&gt;-&lt;</span><span class="sr">/button</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Thatâs not much to do, to make our actions type safe. If you want to add another action, do it at your type declaration.
Itâs the same with the state. The <code class="highlighter-rouge">useReducer</code> typings infer state types from the reducer function:</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">type</span> <span class="nx">StateType</span> <span class="o">=</span> <span class="p">{</span>
  <span class="na">counte</span><span class="p">:</span> <span class="nx">number</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">reducer</span><span class="p">(</span><span class="nx">state</span><span class="p">:</span> <span class="nx">StateType</span><span class="p">,</span> <span class="nx">action</span><span class="p">:</span> <span class="nx">ActionType</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">...</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">Counter</span><span class="p">({</span> <span class="nx">initialCount</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">})</span> <span class="p">{</span>
  <span class="c1">// â¡ï¸ Compile error! Strings are not compatible with numbers</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="s1">'whoops, a string'</span> <span class="p">});</span>
  <span class="p">...</span>
  <span class="c1">// â All good</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">state</span><span class="p">,</span> <span class="nx">dispatch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useReducer</span><span class="p">(</span><span class="nx">reducer</span><span class="p">,</span> <span class="p">{</span> <span class="na">count</span><span class="p">:</span> <span class="nx">initialCount</span> <span class="p">});</span>
  <span class="p">...</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="bottom-line">Bottom line</h2>
<p>I think hooks are exciting. I also think that TypeScriptâs great generics and type inference features are a perfect
match to make your hooks type safe, without doing too much. Thatâs TypeScriptâs greatest strength: Being as little
invasive as possible, while getting the most out of it.</p>
</div>
<p>
<em>Comments? Shoot me a <a href="https://twitter.com/ddprrt">tweet</a>!</em>
</p>
</article>
<nav class="navigation-wrapper">
<ul class="navigation paging">
<li class="paging-item next">
<a class="paging-link link-next" rel="next" href="https://fettblog.eu/typescript-react/render-props/">Render props and child render props</a>
</li>
</ul>
</nav>
<footer class="foot">
<p>Got any questions? Hit me up on <a href="https://twitter.com/ddprrt">Twitter</a> | <a href="https://fettblog.eu/archive">Archive</a></p>
</footer>
<script async="">
if (navigator.serviceWorker && navigator.serviceWorker.controller) {
  console.log('[PWA Builder] active service worker found, no need to register')
} else if(navigator.serviceWorker) {
  //Register the ServiceWorker
  navigator.serviceWorker.register('/pwabuilder-sw.js', {
    scope: '/'
  }).then(function(reg) {
    console.log('Service worker has been registered for scope:'+ reg.scope);
  });
}
</script>


</body></html>